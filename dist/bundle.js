!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i=n(1),o=function(){function t(e){var n=e.x,r=void 0===n?0:n,o=e.y,a=void 0===o?0:o,u=e.zIndex,c=void 0===u?0:u,s=e.width,l=e.height;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=r,this.y=a,this.zIndex=c,this.width=s,this.height=l,this.x2=this.x+s,this.y2=this.y+l,this._hexColor=i.generateRandomColor()}var e,n,o;return e=t,(n=[{key:"draw",value:function(t){t.fillStyle=this._hexColor,t.fillRect(this.x,this.y,this.width,this.height)}},{key:"center",get:function(){return{x:parseInt(this.x+this.width/2),y:parseInt(this.y+this.height/2)}}}])&&r(e.prototype,n),o&&r(e,o),t}();t.exports={Layer:o}},function(t,e){t.exports={generateRandomColor:function(){return"#"+Math.floor(16777215*Math.random()).toString(16)},generateRandomString:function(){return Math.random().toString(36).replace(/[^a-z]+/g,"")}}},function(t,e,n){function r(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function i(t,e,n){return(i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&o(i,n.prototype),i}).apply(null,arguments)}function o(t,e){return(o=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function a(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function u(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(){return(c=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function l(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var f=n(1),h=function(){function t(){s(this,t),this.containers=[],this.loopTimerId=0}var e,n,r;return e=t,(n=[{key:"add",value:function(t){var e=c({},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),n=new y(function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){u(t,e,n[e])})}return t}({object:t},e));this.containers.push(n)}},{key:"get",value:function(t){if("string"==typeof t)return this.getById(t);if("number"==typeof t)return this.getByIndex(t);throw new Error("Argument should only be a string or a number.\n")}},{key:"getById",value:function(t){for(var e=0;e<this.containers.length;e++)if(t===this.containers[e].id)return this.containers[e].object;return null}},{key:"getByIndex",value:function(t){return t<this.containers.length?this.containers[t].object:null}},{key:"getObjects",value:function(){return this.containers.map(function(t){return t.object})}},{key:"loop",value:function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.args,i=void 0===r?[]:r,o=n.interval,u=void 0===o?50:o;this.loopTimerId=setInterval(function(){e[t].apply(e,a(i))},u)}},{key:"stopLoop",value:function(){clearInterval(this.loopTimerId)}},{key:"create",value:function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return i(t,n)}}])&&l(e.prototype,n),r&&l(e,r),t}(),y=function t(e){var n=e.object,i=r(e,["object"]);s(this,t),"id"in i&&"string"==typeof id?this.id=id:this.id="id"in n?n.id:f.generateRandomString(),this.object=n,this.className=this.object.constructor.name,Object.assign(this,i)};t.exports={ObjectContainer:y,ObjectManager:h}},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function o(t){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function a(t,e){return(a=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var u=n(2).ObjectManager,c=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,o(e).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&a(t,e)}(e,u),e}();t.exports={GameObjectManager:c}},function(t,e,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=n(2).ObjectManager,s=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=o(this,a(e).call(this))).gameObjectManager=t,n}var n,r,s;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,c),n=e,(r=[{key:"run",value:function(){for(var t=this.gameObjectManager.getObjects(),e=0;e<this.containers.length;e++){this.containers[e].object.happen(t)}}}])&&i(n.prototype,r),s&&i(n,s),e}();t.exports={GameEventManager:s}},function(t,e,n){t.exports=n.p+"images/491f0c964bfcc8d693ed38e58d9564f4.png"},function(t,e,n){t.exports=n.p+"images/b9c086b8cbc4bf4b831e39247d9b8b5f.png"},function(t,e,n){t.exports=n.p+"images/209d1bbf0d9ce9388686bc27b1f2f7a3.png"},function(t,e,n){t.exports=n.p+"images/290a53182f3488b10d050ffcb84a00c7.png"},function(t,e,n){t.exports=n.p+"images/3870ea4e5f7fd3d05f0bc4cb19710576.png"},function(t,e,n){"use strict";n.r(e);var r=60,i=2,o=4,a="idle";function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(e){var n=e.image,r=e.sliceWidth,i=e.sliceHeight,o=e.matrix,a=e.range,c=e.multiple;u(this,t),this.image=n,this.sliceWidth=r,this.sliceHeight=i,this.countInRows=o[0],this.countInCols=o[1],this.startIndex=void 0===a?0:a[0],this.endIndex=void 0===a?this.countInRows*this.countInCols-1:a[1],this.multiple=void 0===c?1:c}var e,n,r;return e=t,(n=[{key:"slice",value:function(){for(var t=[],e=this.startIndex;e<=this.endIndex;e++)for(var n=e%this.countInRows,r=Math.floor(e/this.countInRows),i=new l({image:this.image,x:this.sliceWidth*n,y:this.sliceHeight*r,width:this.sliceWidth,height:this.sliceHeight}),o=0;o<this.multiple;o++)t.push(i);return t}}])&&c(e.prototype,n),r&&c(e,r),t}(),l=function t(e){var n=e.image,r=e.x,i=e.y,o=e.width,a=e.height;u(this,t),this.image=n,this.x=r,this.y=i,this.width=o,this.height=a};function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var h=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.layer,r=void 0===n?null:n,i=e.interval,o=void 0===i?50:i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.layer=r,this.animationInterval=o,this.timerId=0,this.isStarted=!1,this.count=0}var e,n,r;return e=t,(n=[{key:"animate",value:function(){var t=this;return new Promise(function(e,n){t.timerId=setInterval(function(){t.count<20?t.count++:(clearInterval(t.timerId),e())},t.animationInterval)})}},{key:"start",value:function(){if(!this.isStarted)return this.isStarted=!0,this.animate()}},{key:"stop",value:function(){clearInterval(this.timerId),clearTimeout(this.timerId),this.isStarted=!1}}])&&f(e.prototype,n),r&&f(e,r),t}();function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=function(){function t(e){var n=e.id,r=e.priority,i=void 0===r?1:r,o=e.animations,a=void 0===o?[]:o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n,this.priority=i,this.animations=a,this.isStarted=!1}var e,n,r;return e=t,(n=[{key:"add",value:function(){for(var t=this,e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];n.forEach(function(e){t.animations.push(e)})}},{key:"runTogether",value:function(){this.animations.forEach(function(t){t.start()}),this.isStarted=!0}},{key:"runOneByOne",value:function(t){var e=this,n=this.animations.length;return new Promise(function(r){e.animations[t].start().then(function(){var i=t+1;i<n?e.runOneByOne(i):(e.isStarted=!1,r())})})}},{key:"run",value:function(){return this.isStarted=!0,this.runOneByOne(0)}},{key:"stop",value:function(){this.animations.forEach(function(t){t.stop()}),this.isStarted=!1}}])&&y(e.prototype,n),r&&y(e,r),t}();function m(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var d=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.animationQueues=[],this.currentAnimationQueue=null}var e,n,r;return e=t,(n=[{key:"addQueue",value:function(t){if(!(t instanceof p))throw new Error("[Velo] Argument must be an instance of AnimationQueue.\n");this.animationQueues.push(t)}},{key:"addQueueByAnimation",value:function(t){var e=t.qid,n=t.priority,r=void 0===n?1:n,i=t.animation,o=!0,a=!1,u=void 0;try{for(var c,s=this.animationQueues[Symbol.iterator]();!(o=(c=s.next()).done);o=!0){if(c.value.id===e)throw new Error("[Velo] Animation already exists. Animation ID: ".concat(e,"\n"))}}catch(t){a=!0,u=t}finally{try{o||null==s.return||s.return()}finally{if(a)throw u}}var l=new p({id:e,animations:[i],priority:r});this.animationQueues.push(l)}},{key:"getQueue",value:function(t){var e=!0,n=!1,r=void 0;try{for(var i,o=this.animationQueues[Symbol.iterator]();!(e=(i=o.next()).done);e=!0){var a=i.value;if(a.id===t)return a}}catch(t){n=!0,r=t}finally{try{e||null==o.return||o.return()}finally{if(n)throw r}}return null}},{key:"runQueue",value:function(t){var e=this.getQueue(t);if(null===e)throw new Error("[Velo] Animation (ID: ".concat(t,") not found.\n"));if(null!==this.currentAnimationQueue){if(e.priority>this.currentAnimationQueue.priority)return;this.currentAnimationQueue.stop()}return this.currentAnimationQueue=e,this.currentAnimationQueue.run()}},{key:"stopQueue",value:function(t){var e=this.getQueue(t);if(null===e)throw new Error("[Velo] Animation (ID: ".concat(t,") not found.\n"));e.stop()}},{key:"stopAllQueues",value:function(){this.animationQueues.forEach(function(t){t.stop()})}}])&&m(e.prototype,n),r&&m(e,r),t}();function b(t){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function g(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e){return!e||"object"!==b(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function k(t){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function O(t,e){return(O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var j=function(t){function e(t){var n,r=t.repeat,i=void 0===r||r,o=t.spriteImage,a=void 0===o?null:o,u=t.flip,c=void 0!==u&&u,s=v(t,["repeat","spriteImage","flip"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=w(this,k(e).call(this,s))).sliceCount=0,n.shouldRepeat=i,n.spriteImage=a,n.shouldFlipImage=c,n.imageSlices=n.sliceImages(),n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&O(t,e)}(e,h),n=e,(r=[{key:"sliceImages",value:function(){if(null===this.spriteImage||this.spriteImage instanceof s==!1)throw new Error("[Velo] SpriteImage not found or not valid.\n");return this.spriteImage.slice()}},{key:"animate",value:function(){var t=this;this.layer.shouldFlipImage=this.shouldFlipImage;return new Promise(function(e){t.timerId=setInterval(function(){t.layer.imageSlice=t.imageSlices[t.sliceCount],t.sliceCount<t.imageSlices.length-1?t.sliceCount++:(!1===t.shouldRepeat&&(t.stop(),e()),t.sliceCount=0)},t.animationInterval)})}}])&&g(n.prototype,r),i&&g(n,i),e}();function S(t){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function I(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function x(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function P(t,e){return!e||"object"!==S(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function _(t){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function E(t,e){return(E=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var D=function(t){function e(t){var n,r=t.sliceIndex,i=void 0===r?0:r,o=t.duration,a=void 0===o?1e3:o,u=I(t,["sliceIndex","duration"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=P(this,_(e).call(this,u))).duration=a,n.sliceIndex=i,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&E(t,e)}(e,j),n=e,(r=[{key:"animate",value:function(){var t=this;return setTimeout(function(){t.layer.imageSlice=t.imageSlices[t.sliceIndex]},this.animationInterval),new Promise(function(e){t.timerId=setTimeout(function(){t.stop(),e()},t.duration)})}}])&&x(n.prototype,r),i&&x(n,i),e}(),A=n(0);function T(t){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function Q(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function M(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function R(t,e){return!e||"object"!==T(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function C(t){return(C=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function K(t,e){return(K=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var W=function(t){function e(t){var n,r=t.image,i=Q(t,["image"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=R(this,C(e).call(this,i))).image=r,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&K(t,e)}(e,A["Layer"]),n=e,(r=[{key:"draw",value:function(t){var e=t.createPattern(this.image,"repeat");t.fillStyle=e,t.fillRect(this.x,this.y,this.width,this.height)}}])&&M(n.prototype,r),i&&M(n,i),e}();function B(t){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function L(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function H(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function z(t,e){return!e||"object"!==B(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function F(t){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function J(t,e){return(J=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var U=function(t){function e(t){var n,r=t.imageSlice,i=void 0===r?null:r,o=t.flip,a=void 0!==o&&o,u=L(t,["imageSlice","flip"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=z(this,F(e).call(this,u))).imageSlice=i,n.shouldFlipImage=a,n}var n,r,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&J(t,e)}(e,A["Layer"]),n=e,(r=[{key:"draw",value:function(t){null!==this.imageSlice&&(!0===this.shouldFlipImage?(t.translate(this.width+2*this.x,0),t.scale(-1,1)):(t.translate(0,0),t.scale(1,1)),t.fillStyle="green",t.fillRect(this.x,this.y,this.width,this.height),t.drawImage(this.imageSlice.image,this.imageSlice.x,this.imageSlice.y,this.imageSlice.width,this.imageSlice.height,this.x,this.y,this.width,this.height))}}])&&H(n.prototype,r),i&&H(n,i),e}();function q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var V=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.context=e,this.refreshRate=n,this.layers=[],this.refreshTimerId=0}var e,n,i;return e=t,(n=[{key:"get",value:function(t){for(var e=0;e<this.layers.length;e++)if(this.layers[e].id===t)return this.layers[e];return null}},{key:"sortLayers",value:function(){this.layers.sort(function(t,e){return t.zIndex-e.zIndex})}},{key:"add",value:function(t){return this.layers.push(t),this.sortLayers(),t}},{key:"paint",value:function(){for(var t=0;t<this.layers.length;t++){var e=this.layers[t];this.drawLayer(e)}}},{key:"drawLayer",value:function(t){this.context.setTransform(1,0,0,1,0,0),t.draw(this.context)}},{key:"init",value:function(){var t=this,e=Math.floor(1e3/this.refreshRate);this.refreshTimerId=setInterval(function(){0,t.paint()},e)}},{key:"stop",value:function(){clearInterval(this.refreshTimerId)}}])&&q(e.prototype,n),i&&q(e,i),t}(),G=n(1);function N(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var X=function(){function t(e){var n=e.id,r=void 0===n?Object(G.generateRandomString)():n,i=e.layer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=r,this.layer=i,this.isBounceStarted=!1}var e,n,r;return e=t,(n=[{key:"moveTo",value:function(t,e){this.layer.x=t,this.layer.y=e}},{key:"stay",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3;return new Promise(function(e,n){setTimeout(function(){return e()},t)})}},{key:"move",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:None,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return 1===t?this.layer.y-=e:t===i?this.layer.x+=e:3===t?this.layer.y+=e:t===o&&(this.layer.x-=e),new Promise(function(t,e){t()})}},{key:"bounce",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.startHeight,a=void 0===r?50:r,u=n.stepSizeX,c=void 0===u?5:u,s=n.stepSizeY,l=void 0===s?5:s,f=n.time,h=void 0===f?500:f,y=n.interval,p=void 0===y?20:y;if(!this.isBounceStarted){this.isBounceStarted=!0;var m=0,d=0;e===o?(m=-c,d=0):e===i?(m=c,d=0):1===e?(m=0,d=l):3===e&&(m=0,d=-l);var b=parseInt(h/2/p,10),v=1;return new Promise(function(e,n){var r=setInterval(function(){if(v<b){var n=parseInt(a/v);t.layer.y-=n+d,t.layer.x+=m,v++}else clearInterval(r),r=setInterval(function(){if(--v>0){var n=parseInt(a/v);t.layer.y+=n-d,t.layer.x+=m}else clearInterval(r),t.isBounceStarted=!1,e()},p)},p)})}}}])&&N(e.prototype,n),r&&N(e,r),t}(),Y=n(3);function Z(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var $=function(){function t(e){var n=e.element,r=e.width,i=e.height,o=e.backgroundImage;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.element=n,this.width=r,this.height=i,this.backgroundImage=o,this.element.width=this.width,this.element.height=this.height,this.context=this.element.getContext("2d"),this.layerManager=new V(this.context),this.gameObjectManager=new Y.GameObjectManager}var e,n,r;return e=t,(n=[{key:"init",value:function(){var t=new W({id:"background",x:0,y:0,zIndex:0,width:this.width,height:this.height,image:this.backgroundImage});this.layerManager.add(t),this.layerManager.init()}},{key:"addObject",value:function(t){this.layerManager.add(t.layer),this.gameObjectManager.add(t)}}])&&Z(e.prototype,n),r&&Z(e,r),t}(),tt=(n(2),n(4),n(5)),et=n.n(tt),nt=n(6),rt=n.n(nt),it=n(7),ot=n.n(it),at=n(8),ut=n.n(at);function ct(t){return(ct="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function st(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function lt(t,e){return!e||"object"!==ct(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function ft(t){return(ft=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function ht(t,e){return(ht=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var yt=new(function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=lt(this,ft(e).call(this,t))).facing=i,n.animationManager=new d,n.currentState=a,n.init(),n}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ht(t,e)}(e,X),n=e,(r=[{key:"init",value:function(){this.animationManager=function(t){var e=new d,n=new Image;n.src=et.a;var r=new s({image:n,sliceWidth:196,sliceHeight:197.5,matrix:[4,4]}),i=new j({layer:t,spriteImage:r}),o=new j({layer:t,flip:!0,spriteImage:r}),a=new Image;a.src=rt.a;var u=new s({image:a,sliceWidth:196,sliceHeight:197.5,matrix:[4,5]}),c=new j({layer:t,spriteImage:u}),l=new j({layer:t,flip:!0,spriteImage:u}),f=new Image;f.src=ut.a;var h=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3],range:[0,6]}),y=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3],range:[8,11]}),m=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3]}),b=new j({layer:t,repeat:!1,spriteImage:h}),v=new D({layer:t,repeat:!1,spriteImage:m,sliceIndex:7,duration:500}),g=new j({layer:t,repeat:!1,spriteImage:y}),w=new j({layer:t,repeat:!1,flip:!0,spriteImage:h}),k=new D({layer:t,repeat:!1,spriteImage:m,sliceIndex:7,duration:500,flip:!0}),O=new j({layer:t,repeat:!1,spriteImage:y,flip:!0}),S=new p({id:"jump-left",animations:[b,v,g,c]}),I=new p({id:"jump-right",animations:[w,k,O,l]}),x=new Image;x.src=ot.a;var P=new s({image:x,sliceWidth:196,sliceHeight:197.5,matrix:[4,2]}),_=new j({layer:t,spriteImage:P,repeat:!1,interval:50}),E=new j({layer:t,flip:!0,spriteImage:P,repeat:!1,interval:50}),A=new p({id:"attack-left",animations:[_]}),T=new p({id:"attack-right",animations:[E]});return e.addQueueByAnimation({qid:"walk-left",animation:i}),e.addQueueByAnimation({qid:"walk-right",animation:o}),e.addQueueByAnimation({qid:"idle-left",animation:c}),e.addQueueByAnimation({qid:"idle-right",animation:l}),e.addQueue(S),e.addQueue(I),e.addQueue(A),e.addQueue(T),e}(this.layer),this.idle()}},{key:"walkByFacing",value:function(){"walk"!==this.currentState&&(this.currentState="walk",this.facing===o?this.animationManager.runQueue("walk-left"):this.facing===i&&this.animationManager.runQueue("walk-right"))}},{key:"stopWalk",value:function(){this.idle()}},{key:"walk",value:function(t){"jump"!==this.currentState&&"attack"!==this.currentState&&(t===o?(this.facing=o,this.move(o)):t===i?(this.facing=i,this.move(i)):1===t?this.move(1):3===t&&this.move(3),this.walkByFacing())}},{key:"walkLeft",value:function(){return this.walk(o)}},{key:"walkRight",value:function(){return this.walk(i)}},{key:"attack",value:function(t){var e=this;"attack"!==this.currentState&&(this.currentState="attack",this.facing===o?this.animationManager.runQueue("attack-left").then(function(){e.idle()}):this.facing===i&&this.animationManager.runQueue("attack-right").then(function(){e.idle()}))}},{key:"jumpLeft",value:function(){this.facing=o,this.jump(o)}},{key:"jumpRight",value:function(){this.facing=i,this.jump(i)}},{key:"jumpUp",value:function(){this.jump(1)}},{key:"jumpDown",value:function(){this.jump(3)}},{key:"idle",value:function(){"jump"!==this.currentState&&(this.facing===o?this.animationManager.runQueue("idle-left"):this.facing===i&&this.animationManager.runQueue("idle-right"),this.currentState=a)}},{key:"jump",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;"jump"!==this.currentState&&(this.currentState="jump",this.facing===o?this.animationManager.runQueue("jump-left"):this.facing===i&&this.animationManager.runQueue("jump-right"),this.stay(300).then(function(){return t.bounce(e,{time:700})}).then(function(){t.currentState=0}))}},{key:"stop",value:function(){this.animationManager.stopAllQueues()}}])&&st(n.prototype,r),u&&st(n,u),e}())({id:"velo",layer:new U({id:"velo",x:128,y:128,zIndex:2,width:196,height:197.5})});function pt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var mt=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.character=e,this.keysDown={a:!1,A:!1,ArrowLeft:!1,d:!1,D:!1,ArrowRight:!1,w:!1,W:!1,ArrowUp:!1,s:!1,S:!1,ArrowDown:!1,k:!1,K:!1,Enter:!1," ":!1}}var e,n,r;return e=t,(n=[{key:"init",value:function(){document.body.addEventListener("keydown",this.handleKeyDown.bind(this)),document.body.addEventListener("keyup",this.handleKeyUp.bind(this)),document.body.addEventListener("mousedown",this.handleMouseDown.bind(this))}},{key:"resetKeysDown",value:function(){for(var t in this.keysDown)this.keysDown[t]=!1}},{key:"isWalkKeyDown",value:function(t){var e=this.keysDown.w||this.keysDown.W||this.keysDown.ArrowUp,n=this.keysDown.a||this.keysDown.A||this.keysDown.ArrowLeft,r=this.keysDown.s||this.keysDown.S||this.keysDown.ArrowDown,a=this.keysDown.d||this.keysDown.D||this.keysDown.ArrowRight;return 1===t?e:t===o?n:3===t?r:t===i?a:e||n||r||a}},{key:"isJumpKeyDown",value:function(){return this.keysDown[" "]}},{key:"isAttackKeyDown",value:function(){return this.keysDown.k||this.keysDown.K||this.keysDown.Enter}},{key:"handleKeysOfAttack",value:function(){this.isAttackKeyDown()&&this.character.attack()}},{key:"handleKeysOfWalkAndJump",value:function(){this.isWalkKeyDown(1)?this.isJumpKeyDown()?this.character.jumpUp():this.character.walk(1):this.isWalkKeyDown(o)?this.isJumpKeyDown()?this.character.jumpLeft():this.character.walk(o):this.isWalkKeyDown(3)?this.isJumpKeyDown()?this.character.jumpDown():this.character.walk(3):this.isWalkKeyDown(i)?this.isJumpKeyDown()?this.character.jumpRight():this.character.walk(i):this.isJumpKeyDown()&&this.character.jump()}},{key:"handleKeyDown",value:function(t){t.key in this.keysDown&&(this.keysDown[t.key]=!0,this.handleKeysOfWalkAndJump(),this.handleKeysOfAttack())}},{key:"handleKeyUp",value:function(t){t.key in this.keysDown&&("walk"===this.character.currentState&&this.character.stopWalk(),this.keysDown[t.key]=!1)}},{key:"handleMouseDown",value:function(t){t.preventDefault(),this.character.attack()}}])&&pt(e.prototype,n),r&&pt(e,r),t}(),dt=n(9),bt=n.n(dt),vt=new Image;vt.src=bt.a;var gt=new $({element:document.getElementById("game"),width:960,height:480,backgroundImage:vt});new U({id:"velo",x:128,y:128,zIndex:2,width:196,height:197.5});gt.addObject(yt),gt.init(),new mt(yt).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,