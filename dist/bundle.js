!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}([function(t,e){function n(t,e,r){return(n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&i(o,n.prototype),o}).apply(null,arguments)}function i(t,e){return(i=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var a=function(){function t(){r(this,t),this.containers=[]}var e,i,a;return e=t,(i=[{key:"add",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.id,i=e.prop,r=new u({id:n,prop:i,object:t});this.containers.push(r)}},{key:"get",value:function(t){for(var e=0;e<this.containers.length;e++)if(t===this.containers[e].id)return this.containers[e].object;return null}},{key:"getObjects",value:function(){return this.containers.map(function(t){return t.object})}},{key:"create",value:function(t){for(var e=arguments.length,i=new Array(e>1?e-1:0),r=1;r<e;r++)i[r-1]=arguments[r];return n(t,i)}}])&&o(e.prototype,i),a&&o(e,a),t}(),u=function t(e){var n=e.id,i=e.prop,o=e.object;r(this,t),this.id="string"==typeof n?n:"id"in o?o.id:Math.random().toString(36).replace(/[^a-z]+/g,""),"string"==typeof i&&(this[i]=o),this.object=o,this.className=this.object.constructor.name};t.exports={ObjectContainer:u,ObjectManager:a}},function(t,e){t.exports={generateRandomColor:function(){return"#"+Math.floor(16777215*Math.random()).toString(16)},generateRandomString:function(){return Math.random().toString(36).replace(/[^a-z]+/g,"")}}},function(t,e,n){function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,e){return(u=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var c=n(0).ObjectManager,s=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,a(e).call(this,arguments))}var n,i,s;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&u(t,e)}(e,c),n=e,(i=[{key:"run",value:function(t){for(var e=0;e<this.containers.length;e++){this.containers[e].object.happen(t)}}}])&&r(n.prototype,i),s&&r(n,s),e}();t.exports={GameEventManager:s}},function(t,e,n){t.exports=n.p+"images/491f0c964bfcc8d693ed38e58d9564f4.png"},function(t,e,n){t.exports=n.p+"images/b9c086b8cbc4bf4b831e39247d9b8b5f.png"},function(t,e,n){t.exports=n.p+"images/209d1bbf0d9ce9388686bc27b1f2f7a3.png"},function(t,e,n){t.exports=n.p+"images/290a53182f3488b10d050ffcb84a00c7.png"},function(t,e,n){t.exports=n.p+"images/3870ea4e5f7fd3d05f0bc4cb19710576.png"},function(t,e,n){"use strict";n.r(e);var i=60,r=2,o=4,a="idle";function u(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function c(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var s=function(){function t(e){var n=e.image,i=e.sliceWidth,r=e.sliceHeight,o=e.matrix,a=e.range,c=e.multiple;u(this,t),this.image=n,this.sliceWidth=i,this.sliceHeight=r,this.countInRows=o[0],this.countInCols=o[1],this.startIndex=void 0===a?0:a[0],this.endIndex=void 0===a?this.countInRows*this.countInCols-1:a[1],this.multiple=void 0===c?1:c}var e,n,i;return e=t,(n=[{key:"slice",value:function(){for(var t=[],e=this.startIndex;e<=this.endIndex;e++)for(var n=e%this.countInRows,i=Math.floor(e/this.countInRows),r=new l({image:this.image,x:this.sliceWidth*n,y:this.sliceHeight*i,width:this.sliceWidth,height:this.sliceHeight}),o=0;o<this.multiple;o++)t.push(r);return t}}])&&c(e.prototype,n),i&&c(e,i),t}(),l=function t(e){var n=e.image,i=e.x,r=e.y,o=e.width,a=e.height;u(this,t),this.image=n,this.x=i,this.y=r,this.width=o,this.height=a};function f(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var h=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.layer,i=void 0===n?null:n,r=e.interval,o=void 0===r?50:r;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.layer=i,this.animationInterval=o,this.timerId=0,this.isStarted=!1,this.count=0}var e,n,i;return e=t,(n=[{key:"animate",value:function(){var t=this;return new Promise(function(e,n){t.timerId=setInterval(function(){t.count<20?t.count++:(clearInterval(t.timerId),e())},t.animationInterval)})}},{key:"start",value:function(){if(!this.isStarted)return this.isStarted=!0,this.animate()}},{key:"stop",value:function(){clearInterval(this.timerId),clearTimeout(this.timerId),this.isStarted=!1}}])&&f(e.prototype,n),i&&f(e,i),t}();function y(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var p=function(){function t(e){var n=e.id,i=e.priority,r=void 0===i?1:i,o=e.animations,a=void 0===o?[]:o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n,this.priority=r,this.animations=a,this.isStarted=!1}var e,n,i;return e=t,(n=[{key:"add",value:function(){for(var t=this,e=arguments.length,n=new Array(e),i=0;i<e;i++)n[i]=arguments[i];n.forEach(function(e){t.animations.push(e)})}},{key:"runTogether",value:function(){this.animations.forEach(function(t){t.start()}),this.isStarted=!0}},{key:"runOneByOne",value:function(t){var e=this,n=this.animations.length;return new Promise(function(i){e.animations[t].start().then(function(){var r=t+1;r<n?e.runOneByOne(r):(e.isStarted=!1,i())})})}},{key:"run",value:function(){return this.isStarted=!0,this.runOneByOne(0)}},{key:"stop",value:function(){this.animations.forEach(function(t){t.stop()}),this.isStarted=!1}}])&&y(e.prototype,n),i&&y(e,i),t}();function m(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var d=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.animationQueues=[],this.currentAnimationQueue=null}var e,n,i;return e=t,(n=[{key:"addQueue",value:function(t){if(!(t instanceof p))throw new Error("[Velo] Argument must be an instance of AnimationQueue.\n");this.animationQueues.push(t)}},{key:"addQueueByAnimation",value:function(t){var e=t.qid,n=t.priority,i=void 0===n?1:n,r=t.animation,o=!0,a=!1,u=void 0;try{for(var c,s=this.animationQueues[Symbol.iterator]();!(o=(c=s.next()).done);o=!0){if(c.value.id===e)throw new Error("[Velo] Animation already exists. Animation ID: ".concat(e,"\n"))}}catch(t){a=!0,u=t}finally{try{o||null==s.return||s.return()}finally{if(a)throw u}}var l=new p({id:e,animations:[r],priority:i});this.animationQueues.push(l)}},{key:"getQueue",value:function(t){var e=!0,n=!1,i=void 0;try{for(var r,o=this.animationQueues[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var a=r.value;if(a.id===t)return a}}catch(t){n=!0,i=t}finally{try{e||null==o.return||o.return()}finally{if(n)throw i}}return null}},{key:"runQueue",value:function(t){var e=this.getQueue(t);if(null===e)throw new Error("[Velo] Animation (ID: ".concat(t,") not found.\n"));if(null!==this.currentAnimationQueue){if(e.priority>this.currentAnimationQueue.priority)return;this.currentAnimationQueue.stop()}return this.currentAnimationQueue=e,this.currentAnimationQueue.run()}},{key:"stopQueue",value:function(t){var e=this.getQueue(t);if(null===e)throw new Error("[Velo] Animation (ID: ".concat(t,") not found.\n"));e.stop()}},{key:"stopAllQueues",value:function(){this.animationQueues.forEach(function(t){t.stop()})}}])&&m(e.prototype,n),i&&m(e,i),t}();function v(t){return(v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function b(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function g(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function w(t,e){return!e||"object"!==v(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function k(t){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function O(t,e){return(O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var j=function(t){function e(t){var n,i=t.repeat,r=void 0===i||i,o=t.spriteImage,a=void 0===o?null:o,u=t.flip,c=void 0!==u&&u,s=b(t,["repeat","spriteImage","flip"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=w(this,k(e).call(this,s))).sliceCount=0,n.shouldRepeat=r,n.spriteImage=a,n.shouldFlipImage=c,n.imageSlices=n.sliceImages(),n}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&O(t,e)}(e,h),n=e,(i=[{key:"sliceImages",value:function(){if(null===this.spriteImage||this.spriteImage instanceof s==!1)throw new Error("[Velo] SpriteImage not found or not valid.\n");return this.spriteImage.slice()}},{key:"animate",value:function(){var t=this;this.layer.shouldFlipImage=this.shouldFlipImage;return new Promise(function(e){t.timerId=setInterval(function(){t.layer.imageSlice=t.imageSlices[t.sliceCount],t.sliceCount<t.imageSlices.length-1?t.sliceCount++:(!1===t.shouldRepeat&&(t.stop(),e()),t.sliceCount=0)},t.animationInterval)})}}])&&g(n.prototype,i),r&&g(n,r),e}();function S(t){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function I(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function x(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function _(t,e){return!e||"object"!==S(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function P(t){return(P=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function D(t,e){return(D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var E=function(t){function e(t){var n,i=t.sliceIndex,r=void 0===i?0:i,o=t.duration,a=void 0===o?1e3:o,u=I(t,["sliceIndex","duration"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=_(this,P(e).call(this,u))).duration=a,n.sliceIndex=r,n}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&D(t,e)}(e,j),n=e,(i=[{key:"animate",value:function(){var t=this;return setTimeout(function(){t.layer.imageSlice=t.imageSlices[t.sliceIndex]},this.animationInterval),new Promise(function(e){t.timerId=setTimeout(function(){t.stop(),e()},t.duration)})}}])&&x(n.prototype,i),r&&x(n,r),e}(),Q=n(1),A=n.n(Q);function T(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var M=function(){function t(e){var n=e.id,i=e.x,r=e.y,o=e.zIndex,a=e.width,u=e.height;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=n,this.x=i,this.y=r,this.zIndex=o,this.width=a,this.height=u,this._hexColor=A.a.generateRandomColor()}var e,n,i;return e=t,(n=[{key:"draw",value:function(t){t.fillStyle=this._hexColor,t.fillRect(this.x,this.y,this.width,this.height)}}])&&T(e.prototype,n),i&&T(e,i),t}();function R(t){return(R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function C(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function K(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function W(t,e){return!e||"object"!==R(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function B(t){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function L(t,e){return(L=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var z=function(t){function e(t){var n,i=t.image,r=C(t,["image"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=W(this,B(e).call(this,r))).image=i,n}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&L(t,e)}(e,M),n=e,(i=[{key:"draw",value:function(t){var e=t.createPattern(this.image,"repeat");t.fillStyle=e,t.fillRect(this.x,this.y,this.width,this.height)}}])&&K(n.prototype,i),r&&K(n,r),e}();function H(t){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function F(t,e){if(null==t)return{};var n,i,r=function(t,e){if(null==t)return{};var n,i,r={},o=Object.keys(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(i=0;i<o.length;i++)n=o[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function J(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function U(t,e){return!e||"object"!==H(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function q(t){return(q=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function V(t,e){return(V=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var N=function(t){function e(t){var n,i=t.imageSlice,r=void 0===i?null:i,o=t.flip,a=void 0!==o&&o,u=F(t,["imageSlice","flip"]);return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=U(this,q(e).call(this,u))).imageSlice=r,n.shouldFlipImage=a,n}var n,i,r;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&V(t,e)}(e,M),n=e,(i=[{key:"draw",value:function(t){null!==this.imageSlice&&(!0===this.shouldFlipImage?(t.translate(this.width+2*this.x,0),t.scale(-1,1)):(t.translate(0,0),t.scale(1,1)),t.drawImage(this.imageSlice.image,this.imageSlice.x,this.imageSlice.y,this.imageSlice.width,this.imageSlice.height,this.x,this.y,this.width,this.height))}}])&&J(n.prototype,i),r&&J(n,r),e}();function G(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var X=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.context=e,this.refreshRate=n,this.layers=[],this.refreshTimerId=0}var e,n,r;return e=t,(n=[{key:"get",value:function(t){for(var e=0;e<this.layers.length;e++)if(this.layers[e].id===t)return this.layers[e];return null}},{key:"sortLayers",value:function(){this.layers.sort(function(t,e){return t.zIndex-e.zIndex})}},{key:"add",value:function(t){return this.layers.push(t),this.sortLayers(),t}},{key:"paint",value:function(){for(var t=0;t<this.layers.length;t++){var e=this.layers[t];this.drawLayer(e)}}},{key:"drawLayer",value:function(t){this.context.setTransform(1,0,0,1,0,0),t.draw(this.context)}},{key:"init",value:function(){var t=this,e=Math.floor(1e3/this.refreshRate);this.refreshTimerId=setInterval(function(){0,t.paint()},e)}},{key:"stop",value:function(){clearInterval(this.refreshTimerId)}}])&&G(e.prototype,n),r&&G(e,r),t}();function Y(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var Z=function(){function t(e){var n=e.id,i=void 0===n?Object(Q.generateRandomString)():n,r=e.layer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=i,this.layer=r,this.isBounceStarted=!1}var e,n,i;return e=t,(n=[{key:"moveTo",value:function(t,e){this.layer.x=t,this.layer.y=e}},{key:"stay",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1e3;return new Promise(function(e,n){setTimeout(function(){return e()},t)})}},{key:"move",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:None,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;return 1===t?this.layer.y-=e:t===r?this.layer.x+=e:3===t?this.layer.y+=e:t===o&&(this.layer.x-=e),new Promise(function(t,e){t()})}},{key:"bounce",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.startHeight,a=void 0===i?50:i,u=n.stepSizeX,c=void 0===u?5:u,s=n.stepSizeY,l=void 0===s?5:s,f=n.time,h=void 0===f?500:f,y=n.interval,p=void 0===y?20:y;if(!this.isBounceStarted){this.isBounceStarted=!0;var m=0,d=0;e===o?(m=-c,d=0):e===r?(m=c,d=0):1===e?(m=0,d=l):3===e&&(m=0,d=-l);var v=parseInt(h/2/p,10),b=1;return new Promise(function(e,n){var i=setInterval(function(){if(b<v){var n=parseInt(a/b);t.layer.y-=n+d,t.layer.x+=m,b++}else clearInterval(i),i=setInterval(function(){if(--b>0){var n=parseInt(a/b);t.layer.y+=n-d,t.layer.x+=m}else clearInterval(i),t.isBounceStarted=!1,e()},p)},p)})}}}])&&Y(e.prototype,n),i&&Y(e,i),t}(),$=n(0);function tt(t){return(tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function et(t,e){return!e||"object"!==tt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function nt(t){return(nt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function it(t,e){return(it=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var rt=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),et(this,nt(e).apply(this,arguments))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&it(t,e)}(e,$["ObjectManager"]),e}();function ot(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var at=function(){function t(e){var n=e.element,i=e.width,r=e.height,o=e.backgroundImage;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.element=n,this.width=i,this.height=r,this.backgroundImage=o,this.element.width=this.width,this.element.height=this.height,this.context=this.element.getContext("2d"),this.layerManager=new X(this.context),this.gameObjectManager=new rt}var e,n,i;return e=t,(n=[{key:"init",value:function(){var t=new z({id:"background",x:0,y:0,zIndex:0,width:this.width,height:this.height,image:this.backgroundImage});this.layerManager.add(t),this.layerManager.init()}},{key:"addObject",value:function(t){this.layerManager.add(t.layer),this.gameObjectManager.add(t)}}])&&ot(e.prototype,n),i&&ot(e,i),t}(),ut=(n(2),n(3)),ct=n.n(ut),st=n(4),lt=n.n(st),ft=n(5),ht=n.n(ft),yt=n(6),pt=n.n(yt);function mt(t){return(mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function dt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function vt(t,e){return!e||"object"!==mt(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function bt(t){return(bt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function gt(t,e){return(gt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var wt=new(function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=vt(this,bt(e).call(this,t))).facing=r,n.animationManager=new d,n.currentState=a,n.init(),n}var n,i,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&gt(t,e)}(e,Z),n=e,(i=[{key:"init",value:function(){this.animationManager=function(t){var e=new d,n=new Image;n.src=ct.a;var i=new s({image:n,sliceWidth:196,sliceHeight:197.5,matrix:[4,4]}),r=new j({layer:t,spriteImage:i}),o=new j({layer:t,flip:!0,spriteImage:i}),a=new Image;a.src=lt.a;var u=new s({image:a,sliceWidth:196,sliceHeight:197.5,matrix:[4,5]}),c=new j({layer:t,spriteImage:u}),l=new j({layer:t,flip:!0,spriteImage:u}),f=new Image;f.src=pt.a;var h=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3],range:[0,6]}),y=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3],range:[8,11]}),m=new s({image:f,sliceWidth:196,sliceHeight:197.5,matrix:[4,3]}),v=new j({layer:t,repeat:!1,spriteImage:h}),b=new E({layer:t,repeat:!1,spriteImage:m,sliceIndex:7,duration:500}),g=new j({layer:t,repeat:!1,spriteImage:y}),w=new j({layer:t,repeat:!1,flip:!0,spriteImage:h}),k=new E({layer:t,repeat:!1,spriteImage:m,sliceIndex:7,duration:500,flip:!0}),O=new j({layer:t,repeat:!1,spriteImage:y,flip:!0}),S=new p({id:"jump-left",animations:[v,b,g,c]}),I=new p({id:"jump-right",animations:[w,k,O,l]}),x=new Image;x.src=ht.a;var _=new s({image:x,sliceWidth:196,sliceHeight:197.5,matrix:[4,2]}),P=new j({layer:t,spriteImage:_,repeat:!1,interval:50}),D=new j({layer:t,flip:!0,spriteImage:_,repeat:!1,interval:50}),Q=new p({id:"attack-left",animations:[P]}),A=new p({id:"attack-right",animations:[D]});return e.addQueueByAnimation({qid:"walk-left",animation:r}),e.addQueueByAnimation({qid:"walk-right",animation:o}),e.addQueueByAnimation({qid:"idle-left",animation:c}),e.addQueueByAnimation({qid:"idle-right",animation:l}),e.addQueue(S),e.addQueue(I),e.addQueue(Q),e.addQueue(A),e}(this.layer),this.idle()}},{key:"walkByFacing",value:function(){"walk"!==this.currentState&&(this.currentState="walk",this.facing===o?this.animationManager.runQueue("walk-left"):this.facing===r&&this.animationManager.runQueue("walk-right"))}},{key:"stopWalk",value:function(){this.idle()}},{key:"walk",value:function(t){"jump"!==this.currentState&&"attack"!==this.currentState&&(t===o?(this.facing=o,this.move(o)):t===r?(this.facing=r,this.move(r)):1===t?this.move(1):3===t&&this.move(3),this.walkByFacing())}},{key:"walkLeft",value:function(){return this.walk(o)}},{key:"walkRight",value:function(){return this.walk(r)}},{key:"attack",value:function(t){var e=this;"attack"!==this.currentState&&(this.currentState="attack",this.facing===o?this.animationManager.runQueue("attack-left").then(function(){e.idle()}):this.facing===r&&this.animationManager.runQueue("attack-right").then(function(){e.idle()}))}},{key:"jumpLeft",value:function(){this.facing=o,this.jump(o)}},{key:"jumpRight",value:function(){this.facing=r,this.jump(r)}},{key:"jumpUp",value:function(){this.jump(1)}},{key:"jumpDown",value:function(){this.jump(3)}},{key:"idle",value:function(){"jump"!==this.currentState&&(this.facing===o?this.animationManager.runQueue("idle-left"):this.facing===r&&this.animationManager.runQueue("idle-right"),this.currentState=a)}},{key:"jump",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;"jump"!==this.currentState&&(this.currentState="jump",this.facing===o?this.animationManager.runQueue("jump-left"):this.facing===r&&this.animationManager.runQueue("jump-right"),this.stay(300).then(function(){return t.bounce(e,{time:700})}).then(function(){t.currentState=0}))}},{key:"stop",value:function(){this.animationManager.stopAllQueues()}}])&&dt(n.prototype,i),u&&dt(n,u),e}())({id:"velo",layer:new N({id:"velo",x:128,y:128,zIndex:2,width:196,height:197.5})});function kt(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var Ot=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.character=e,this.keysDown={a:!1,A:!1,ArrowLeft:!1,d:!1,D:!1,ArrowRight:!1,w:!1,W:!1,ArrowUp:!1,s:!1,S:!1,ArrowDown:!1,k:!1,K:!1,Enter:!1," ":!1}}var e,n,i;return e=t,(n=[{key:"init",value:function(){document.body.addEventListener("keydown",this.handleKeyDown.bind(this)),document.body.addEventListener("keyup",this.handleKeyUp.bind(this)),document.body.addEventListener("mousedown",this.handleMouseDown.bind(this))}},{key:"resetKeysDown",value:function(){for(var t in this.keysDown)this.keysDown[t]=!1}},{key:"isWalkKeyDown",value:function(t){var e=this.keysDown.w||this.keysDown.W||this.keysDown.ArrowUp,n=this.keysDown.a||this.keysDown.A||this.keysDown.ArrowLeft,i=this.keysDown.s||this.keysDown.S||this.keysDown.ArrowDown,a=this.keysDown.d||this.keysDown.D||this.keysDown.ArrowRight;return 1===t?e:t===o?n:3===t?i:t===r?a:e||n||i||a}},{key:"isJumpKeyDown",value:function(){return this.keysDown[" "]}},{key:"isAttackKeyDown",value:function(){return this.keysDown.k||this.keysDown.K||this.keysDown.Enter}},{key:"handleKeysOfAttack",value:function(){this.isAttackKeyDown()&&this.character.attack()}},{key:"handleKeysOfWalkAndJump",value:function(){this.isWalkKeyDown(1)?this.isJumpKeyDown()?this.character.jumpUp():this.character.walk(1):this.isWalkKeyDown(o)?this.isJumpKeyDown()?this.character.jumpLeft():this.character.walk(o):this.isWalkKeyDown(3)?this.isJumpKeyDown()?this.character.jumpDown():this.character.walk(3):this.isWalkKeyDown(r)?this.isJumpKeyDown()?this.character.jumpRight():this.character.walk(r):this.isJumpKeyDown()&&this.character.jump()}},{key:"handleKeyDown",value:function(t){t.key in this.keysDown&&(this.keysDown[t.key]=!0,this.handleKeysOfWalkAndJump(),this.handleKeysOfAttack())}},{key:"handleKeyUp",value:function(t){t.key in this.keysDown&&("walk"===this.character.currentState&&this.character.stopWalk(),this.keysDown[t.key]=!1)}},{key:"handleMouseDown",value:function(t){t.preventDefault(),this.character.attack()}}])&&kt(e.prototype,n),i&&kt(e,i),t}(),jt=n(7),St=n.n(jt),It=new Image;It.src=St.a;var xt=new at({element:document.getElementById("game"),width:960,height:480,backgroundImage:It});new N({id:"velo",x:128,y:128,zIndex:2,width:196,height:197.5});xt.addObject(wt),xt.init(),new Ot(wt).init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,